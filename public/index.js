/**
 * @file index.js
 * @description –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: Header, –ª–µ–Ω—Ç—É –ø–æ—Å—Ç–æ–≤ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π.
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å—Ç—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–π –ª–µ–Ω—Ç—ã. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏ –∏ –ø—É—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã.
 */

import { Header } from '/components/Header/Header.js';
import { LoginForm } from '/components/LoginForm/LoginForm.js';
import { PostCard } from '/components/PostCard/PostCard.js';

/**
 * –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @type {HTMLElement}
 */
const rootElem = document.getElementById('root');

/**
 * –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —à–∞–ø–∫–∏
 * @type {HTMLElement}
 */
const headerContainer = document.createElement('header');

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
 * @type {HTMLElement}
 */
const pageElement = document.createElement('main');
rootElem.appendChild(headerContainer);
rootElem.appendChild(pageElement);

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–ø–∫–∏
 */
(async () => {
    const header = new Header({ LoginForm });
    const headerEl = await header.render();
    headerContainer.appendChild(headerEl);
})();

/**
 * –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤
 * @type {HTMLDivElement}
 */
const feedContainer = document.createElement('div');
feedContainer.className = 'feed';
pageElement.appendChild(feedContainer);

/**
 * –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ (–ø—Ä–æ—Ç–æ—Ç–∏–ø –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ª–µ–Ω—Ç—ã)
 * @type {number}
 */
let virtualPostIndex = 0;

/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
 * @constant
 * @type {number}
 */
const POSTS_PER_LOAD = 3;

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤
 * @async
 * @returns {Promise<{success: boolean, data?: Array<Object>, error?: string}>}
 *   –û–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
 *   success: true –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–≤–µ—Ç–µ, false –ø—Ä–∏ –æ—à–∏–±–∫–µ
 *   data: –º–∞—Å—Å–∏–≤ –ø–æ—Å—Ç–æ–≤ (–µ—Å–ª–∏ success === true)
 *   error: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ success === false)
 */
async function fetchPosts() {
    try {
        const res = await fetch('http://62.109.19.84:8090/feed');
        if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤');
        return { success: true, data: await res.json() }; //200 + –ø–æ—Å—Ç—ã
    } catch (err) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã:', err);
        return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º üò≠' }; 
    }
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–æ—Å—Ç –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ API –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É PostCard
 * @param {Object} apiPost - –ü–æ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ API
 * @param {string} [apiPost.author_name] - –ò–º—è –∞–≤—Ç–æ—Ä–∞
 * @param {string} [apiPost.author_avatar] - URL –∞–≤–∞—Ç–∞—Ä–∞ –∞–≤—Ç–æ—Ä–∞
 * @param {string} [apiPost.title] - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞
 * @param {string} [apiPost.content] - –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
 * @param {string} [apiPost.image] - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Object} –ü–æ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
function transformPost(apiPost) {
    return {
        user: {
            name: apiPost.author_name || '–ê–Ω–æ–Ω–∏–º',
            subtitle: '–ë–ª–æ–≥',
            avatar: apiPost.author_avatar || '/img/LogoMain.svg',
            isSubscribed: false
        },
        title: apiPost.title,
        text: apiPost.content,
        image: apiPost.image?.trim() || '',
        tags: [
            { key: 'tag1', icon: '/img/icons/js.svg', count: '—Ç–µ–≥1' },
            { key: 'tag2', icon: '/img/icons/web.svg', count: '—Ç–µ–≥2' }
        ],
        commentsCount: '0',
        repostsCount: '0',
        viewsCount: '0'
    };
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç PostCard
 * @async
 * @param {Object} postData - –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UI
 * @returns {Promise<HTMLElement>} - –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–π DOM-—ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å—Ç–∞
 */
async function renderPost(postData) {
    const postCard = new PostCard(postData);
    return await postCard.render();
}

/**
 * –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
 * @type {Array<Object>}
 */
let allPosts = [];

/**
 * –§–ª–∞–≥: –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @type {boolean}
 */
let isDataLoaded = false;

/**
 * –§–ª–∞–≥: –∏–¥—ë—Ç –ª–∏ —Å–µ–π—á–∞—Å –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
 * @type {boolean}
 */
let isLoadingData = false;

/**
 * –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
 * @type {string|null}
 */
let loadError = null;

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –æ–¥–∏–Ω —Ä–∞–∑.
 * –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–≥–æ.
 * @async
 * @returns {Promise<void>}
 */
async function loadData() {
    if (isDataLoaded || isLoadingData) return;

    isLoadingData = true;
    try {
        const result = await fetchPosts();
        if (!result.success) {
            loadError = result.error;
            showFeedError(loadError);
            return;
        }
        allPosts = result.data.map(transformPost);
        isDataLoaded = true;

        if (allPosts.length === 0) {
            observer.unobserve(sentinel);
            showFeedError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤');
        }
    } finally {
        isLoadingData = false;
    }
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é –ø–æ—Å—Ç–æ–≤.
 * @async
 * @returns {Promise<void>}
 */
async function renderNextPosts() {
    if (loadError || !isDataLoaded || allPosts.length === 0) return;

    const fragment = document.createDocumentFragment();
    for (let i = 0; i < POSTS_PER_LOAD; i++) {
        const postIndex = virtualPostIndex % allPosts.length;
        const postData = { ...allPosts[postIndex] };
        const postEl = await renderPost(postData);
        fragment.appendChild(postEl);
        virtualPostIndex++;
    }

    feedContainer.insertBefore(fragment, sentinel);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∞ –∑–∞—Ç–µ–º —Ä–µ–Ω–¥–µ—Ä–∏—Ç —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é.
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∏ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –¥–æ –∫–æ–Ω—Ü–∞ –ª–µ–Ω—Ç—ã.
 * @async
 * @returns {Promise<void>}
 */
async function loadMorePosts() {
    await loadData();
    if (isDataLoaded && !loadError && allPosts.length > 0) {
        renderNextPosts();
    }
}

/**
 * –≠–ª–µ–º–µ–Ω—Ç-—Å–µ–Ω—Å–æ—Ä –¥–ª—è Intersection Observer
 * @type {HTMLDivElement}
 */
const sentinel = document.createElement('div');
sentinel.style.height = '20px';
feedContainer.appendChild(sentinel);

/**
 * –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π. –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ sentinel –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∑–æ–Ω—É –≤–∏–¥–∏–º–æ—Å—Ç–∏.
 * @type {IntersectionObserver}
 */
const observer = new IntersectionObserver((entries) => {
    if (entries[0].isIntersecting) {
        loadMorePosts();
    }
}, {
    rootMargin: '100px' 
});

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ª–µ–Ω—Ç—ã.
 * –£–¥–∞–ª—è–µ—Ç sentinel –∏ –æ—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.
 * @param {string} message - –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {void}
 */
function showFeedError(message) {
    if (sentinel.parentNode) sentinel.remove();
    feedContainer.innerHTML = '';

    const errorEl = document.createElement('div');
    errorEl.className = 'feed-error';
    errorEl.textContent = message;
    feedContainer.appendChild(errorEl);
}

observer.observe(sentinel);

loadMorePosts();